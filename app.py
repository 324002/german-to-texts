import io
import streamlit as st
import requests
from PIL import Image
import time
import json
import os
from datetime import datetime
import base64
import pandas as pd
from typing import List, Dict, Tuple
import concurrent.futures
# import pdfkit
from fpdf import FPDF
import tempfile
from pathlib import Path
import hashlib
from functools import lru_cache
import shutil
import pytesseract

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'pdf'}
CACHE_DIR = Path('cache')
HISTORY_DIR = Path('history')
STATS_FILE = Path('stats.json')

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CACHE_DIR.mkdir(exist_ok=True)
HISTORY_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    page_icon="üìù",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'history' not in st.session_state:
    st.session_state.history = []
if 'batch_results' not in st.session_state:
    st.session_state.batch_results = []
if 'edited_texts' not in st.session_state:
    st.session_state.edited_texts = {}
if 'comparison_results' not in st.session_state:
    st.session_state.comparison_results = {}
if 'export_files' not in st.session_state:
    st.session_state.export_files = {}
if 'processing' not in st.session_state:
    st.session_state.processing = False
if 'stats' not in st.session_state:
    st.session_state.stats = {
        'total_processed': 0,
        'total_success': 0,
        'total_failed': 0,
        'total_size': 0,
        'last_processed': None
    }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
@lru_cache(maxsize=100)
def get_cache_key(image_data: bytes) -> str:
    return hashlib.md5(image_data).hexdigest()

def save_to_cache(image_data: bytes, result: dict):
    cache_key = get_cache_key(image_data)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    with open(cache_file, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)

def get_from_cache(image_data: bytes) -> dict:
    cache_key = get_cache_key(image_data)
    cache_file = CACHE_DIR / f"{cache_key}.json"
    if cache_file.exists():
        with open(cache_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
def update_stats(success: bool, file_size: int):
    st.session_state.stats['total_processed'] += 1
    if success:
        st.session_state.stats['total_success'] += 1
    else:
        st.session_state.stats['total_failed'] += 1
    st.session_state.stats['total_size'] += file_size
    st.session_state.stats['last_processed'] = datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with open(STATS_FILE, 'w', encoding='utf-8') as f:
        json.dump(st.session_state.stats, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def is_allowed_file(filename: str) -> bool:
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def check_file_size(file_data: bytes) -> bool:
    return len(file_data) <= MAX_FILE_SIZE

def optimize_image(image_data: bytes) -> bytes:
    try:
        img = Image.open(io.BytesIO(image_data))
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        if img.size[0] > 2000 or img.size[1] > 2000:
            img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        output = io.BytesIO()
        img.save(output, format='JPEG', quality=85)
        return output.getvalue()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return image_data

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
def process_batch_images(images: List[Tuple[str, bytes]], settings: Dict) -> List[Dict]:
    results = []
    total = len(images)
    progress_text = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    progress_bar = st.progress(0, text=progress_text)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = [None] * total
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for i, (filename, image_data) in enumerate(images):
        try:
            result = process_single_image(image_data, settings)
            results[i] = result
            progress = (i + 1) / total
            progress_bar.progress(progress, text=f"{progress_text} {int(progress * 100)}%")
        except Exception as e:
            results[i] = {'error': str(e)}
            progress = (i + 1) / total
            progress_bar.progress(progress, text=f"{progress_text} {int(progress * 100)}%")
    
    progress_bar.empty()
    return results

def process_single_image(image_data: bytes, settings: Dict) -> Dict:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_result = get_from_cache(image_data)
        if cached_result:
            return cached_result
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        optimized_image = optimize_image(image_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if not check_file_size(optimized_image):
            return {'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'}
        
        files = {'image': optimized_image}
        
        img = Image.open(io.BytesIO(optimized_image))
        text = pytesseract.image_to_string(img, lang='deu')
        result = {"text": text}
        save_to_cache(image_data, result)
        update_stats(True, len(image_data))
        return result
        
        # if response.status_code == 200:
        #     result = response.json()
        #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        #     save_to_cache(image_data, result)
        #     update_stats(True, len(image_data))
        #     return result
        # else:
        #     update_stats(False, len(image_data))
        #     return {'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}'}
    except Exception as e:
        update_stats(False, len(image_data))
        return {'error': str(e)}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
def save_to_history(image_data: bytes, text: str, language: str, processing_time: str):
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        image_hash = hashlib.md5(image_data).hexdigest()
        image_path = HISTORY_DIR / f"{image_hash}.jpg"
        with open(image_path, 'wb') as f:
            f.write(image_data)
        
        history_item = {
            'timestamp': timestamp,
            'text': text,
            'language': language,
            'processing_time': processing_time,
            'image_path': str(image_path)
        }
        
        st.session_state.history.append(history_item)
        history_file = HISTORY_DIR / 'history.json'
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(st.session_state.history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def delete_history_item(index: int):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        original_index = len(st.session_state.history) - index - 1
        if 0 <= original_index < len(st.session_state.history):
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            item = st.session_state.history[original_index]
            image_path = Path(item['image_path'])
            if image_path.exists():
                image_path.unlink()
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            st.session_state.history.pop(original_index)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            history_file = HISTORY_DIR / 'history.json'
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(st.session_state.history, f, ensure_ascii=False, indent=2)
            st.success('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
    except Exception as e:
        st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}')

def clear_history():
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for item in st.session_state.history:
            image_path = Path(item['image_path'])
            if image_path.exists():
                image_path.unlink()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.history = []
        history_file = HISTORY_DIR / 'history.json'
        if history_file.exists():
            history_file.unlink()
        
        st.success('–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞')
    except Exception as e:
        st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
def export_to_txt(text: str, filename: str):
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(text)

def export_to_pdf(text: str, filename: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, text)
    pdf.output(filename)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_history():
    try:
        history_file = HISTORY_DIR / 'history.json'
        if history_file.exists():
            with open(history_file, 'r', encoding='utf-8') as f:
                st.session_state.history = json.load(f)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")
        st.session_state.history = []

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_stats():
    try:
        if STATS_FILE.exists():
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                st.session_state.stats = json.load(f)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_history()
load_stats()

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
    <style>
    .main {
        background-color: #000000;
        color: #ffffff;
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #45a049;
        transform: scale(1.02);
    }
    .stTextInput>div>div>input {
        color: #ffffff;
        background-color: #1a1a1a;
        border: 1px solid #333;
    }
    .stSelectbox>div>div>select {
        color: #ffffff;
        background-color: #1a1a1a;
        border: 1px solid #333;
    }
    .stTextArea>div>div>textarea {
        color: #ffffff;
        background-color: #1a1a1a;
        border: 1px solid #333;
        font-family: monospace;
        font-size: 16px;
        line-height: 1.5;
    }
    .stMarkdown {
        color: #ffffff;
    }
    .stSubheader {
        color: #ffffff;
    }
    .stTitle {
        color: #ffffff;
    }
    .css-1d391kg {
        background-color: #1a1a1a;
    }
    .css-1y4p8pa {
        background-color: #1a1a1a;
    }
    .css-1v0mbdj {
        background-color: #1a1a1a;
    }
    .success {
        color: #4CAF50;
    }
    .error {
        color: #f44336;
    }
    .preview-image {
        max-width: 300px;
        max-height: 200px;
        object-fit: contain;
    }
    .history-item {
        background-color: #1a1a1a;
        padding: 10px;
        margin: 5px 0;
        border-radius: 4px;
        border: 1px solid #333;
    }
    .batch-result {
        background-color: #1a1a1a;
        padding: 15px;
        margin: 10px 0;
        border-radius: 4px;
        border: 1px solid #333;
    }
    .progress-bar {
        height: 4px;
        background-color: #4CAF50;
        transition: width 0.3s ease;
    }
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    .pulse {
        animation: pulse 2s infinite;
    }
    </style>
""", unsafe_allow_html=True)

def compare_results(result1: Dict, result2: Dict) -> Dict:
    try:
        text1 = result1.get('text', '')
        text2 = result2.get('text', '')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Å–ª–æ–≤–∞
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞
        common_words = words1.intersection(words2)
        unique_words1 = words1 - words2
        unique_words2 = words2 - words1
        
        return {
            'similarity': len(common_words) / max(len(words1), len(words2)) if words1 or words2 else 0,
            'common_words': list(common_words),
            'unique_words1': list(unique_words1),
            'unique_words2': list(unique_words2)
        }
    except Exception as e:
        return {'error': str(e)}

def load_image():
    uploaded_files = st.file_uploader(
        label='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
        type=['jpg', 'jpeg', 'png'],
        accept_multiple_files=True,
        help='–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã JPG, JPEG –∏ PNG'
    )
    if uploaded_files:
        images = []
        for file in uploaded_files:
            image_data = file.getvalue()
            st.image(image_data, caption=file.name, width=200)
            images.append((file, image_data))
        return images
    return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
with st.sidebar:
    st.header('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    quality = st.select_slider(
        '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
        options=['–ù–∏–∑–∫–æ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–í—ã—Å–æ–∫–æ–µ'],
        value='–°—Ä–µ–¥–Ω–µ–µ'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'):
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        optimize = st.checkbox('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', value=True)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        use_cache = st.checkbox('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à', value=True)
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        parallel = st.checkbox('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', value=True)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_size = st.number_input(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ú–ë)',
            min_value=1,
            max_value=50,
            value=10
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.header('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    if st.session_state.stats['total_processed'] > 0:
        col1, col2 = st.columns(2)
        with col1:
            st.metric('–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', st.session_state.stats['total_processed'])
            st.metric('–£—Å–ø–µ—à–Ω–æ', st.session_state.stats['total_success'])
        with col2:
            st.metric('–û—à–∏–±–æ–∫', st.session_state.stats['total_failed'])
            st.metric('–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä', f"{st.session_state.stats['total_size'] / 1024 / 1024:.1f} –ú–ë")
        
        if st.session_state.stats['last_processed']:
            last_time = datetime.fromisoformat(st.session_state.stats['last_processed'])
            st.caption(f'–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {last_time.strftime("%Y-%m-%d %H:%M:%S")}')

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.title('üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
uploaded_files = st.file_uploader(
    '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    type=['png', 'jpg', 'jpeg', 'pdf'],
    accept_multiple_files=True
)

if uploaded_files:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
    total_size = sum(len(file.getvalue()) for file in uploaded_files)
    if total_size > max_size * 1024 * 1024:
        st.error(f'–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {max_size} –ú–ë')
    else:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for file in uploaded_files:
            if is_allowed_file(file.name):
                image_data = file.getvalue()
                if check_file_size(image_data):
                    images.append((file.name, image_data))
                else:
                    st.warning(f'–§–∞–π–ª {file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω')
            else:
                st.warning(f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file.name}')
        
        if images:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            settings = {
                'quality': quality,
                'optimize': optimize,
                'use_cache': use_cache,
                'parallel': parallel
            }
            
            # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            if st.button('–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç'):
                st.session_state.processing = True
                try:
                    results = process_batch_images(images, settings)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for i, (result, (filename, _)) in enumerate(zip(results, images)):
                        with st.expander(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {filename}'):
                            if 'error' in result:
                                st.error(f'–û—à–∏–±–∫–∞: {result["error"]}')
                            else:
                                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                st.image(images[i][1], caption=filename, width=300)
                                
                                # –¢–µ–∫—Å—Ç
                                text = result.get('text', '')
                                edited_text = st.text_area(
                                    '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
                                    value=text,
                                    height=300,
                                    key=f'text_{i}'
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                                if text != edited_text:
                                    st.session_state.edited_texts[i] = edited_text
                                save_to_history(
                                    images[i][1],
                                    edited_text,
                                    'ru',
                                    result.get('processing_time', '')
                                )
                except Exception as e:
                    st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}')
                finally:
                    st.session_state.processing = False

# –ò—Å—Ç–æ—Ä–∏—è
if st.session_state.history:
    st.header('üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2 = st.columns(2)
    with col1:
        date_filter = st.date_input('–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ')
    with col2:
        if st.button('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'):
            clear_history()
            st.experimental_rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for i, item in enumerate(reversed(st.session_state.history)):
        item_date = datetime.strptime(item['timestamp'], "%Y-%m-%d %H:%M:%S").date()
        if date_filter is None or item_date == date_filter:
            with st.expander(f'–ó–∞–ø–∏—Å—å –æ—Ç {item["timestamp"]}'):
                col1, col2 = st.columns([3, 1])
                with col1:
                    image_path = Path(item['image_path'])
                    if image_path.exists():
                        st.image(str(image_path), width=300)
                    else:
                        st.warning('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                with col2:
                    if st.button('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', key=f'delete_{i}'):
                        delete_history_item(i)
                        st.experimental_rerun()
                
                st.text_area('–¢–µ–∫—Å—Ç', value=item['text'], height=300, key=f'history_text_{i}')
                st.caption(f'–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {item["processing_time"]}')

# –§—É—Ç–µ—Ä
st.markdown('---')
st.markdown('*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö*') 
